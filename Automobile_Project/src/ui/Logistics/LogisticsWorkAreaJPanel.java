/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Logistics;

import Business.Car.Car;
import Business.Car.CarDirectory;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InventoryOrderRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.Manufacturer.ViewOrderInfoJPanel;

/**
 *
 * @author srinivasarithikghantasala
 */
public class LogisticsWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LogisticsWorkAreaJPanel
     */
    JPanel workArea;
    EcoSystem system;
    UserAccount account;
    Organization organization;
    Enterprise enterprise;
    public LogisticsWorkAreaJPanel(JPanel workArea, UserAccount account,Organization organization,Enterprise enterprise , EcoSystem system) {
        initComponents();
        this.workArea = workArea;
        this.system = system;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkArea = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnSetDD = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDeliveryCom = new javax.swing.JButton();
        btnViewOrder = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblWorkArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Model", "Quantity", "Logistics", "Est Delivery Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkArea);

        btnAssign.setText("Assign to me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnSetDD.setText("Set Delivery Date");
        btnSetDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDDActionPerformed(evt);
            }
        });

        jLabel1.setText("Date :");

        btnDeliveryCom.setText("Order Delivered");
        btnDeliveryCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryComActionPerformed(evt);
            }
        });

        btnViewOrder.setText("View Order");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("Welcome to Logistics Work Area");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAssign)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(btnSetDD, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnViewOrder, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDeliveryCom, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jLabel2)))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2)
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssign)
                    .addComponent(btnViewOrder))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSetDD)
                        .addComponent(jLabel1)
                        .addComponent(btnDeliveryCom))
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(155, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        InventoryOrderRequest req = (InventoryOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
        if(req.getLogistics()!= null){
            JOptionPane.showMessageDialog(this, "Already assigned", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(req.getIsPaint()==false){
            JOptionPane.showMessageDialog(this, "Cannot be assigned now", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(req.getIsManf()==false){
            JOptionPane.showMessageDialog(this, "Cannot be assigned now", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(req.getIsTech()==false){
            JOptionPane.showMessageDialog(this, "Cannot be assigned now", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(req.getIsTest()==false){
            JOptionPane.showMessageDialog(this, "Cannot be assigned now", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        req.setLogistics(account);
        req.setStatus("Logistics Handler assigned");
        populateRequestTable();
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnSetDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDDActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        InventoryOrderRequest req = (InventoryOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
        if(req.getLogistics() != account){
            JOptionPane.showMessageDialog(this, "It is not assigned to you!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if (req.getLogistics() == account && req.getIsManf()==true && req.getIsPaint()==true && req.getIsTech()==true && req.getIsTest()==true && req.getIsLog()==false){
            req.setStatus("Estimated Delivery Date Assigned !!");
            req.setIsLog(true);
     //       String deliveryDate = txtdeliveryDate.getText();
            Date selectedDate = dateChooser.getDate();
if (selectedDate == null) {
    JOptionPane.showMessageDialog(this, "Please select a delivery date.", "Information", JOptionPane.INFORMATION_MESSAGE);
    return;
}

        SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy"); // Use your preferred format
        String deliveryDate = dateFormat.format(selectedDate);

// Proceed with delivery date
System.out.println("Selected Delivery Date: " + deliveryDate);
            if(deliveryDate.trim().isEmpty()){
                 JOptionPane.showMessageDialog(this, "Give Deilvery Date", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
            }
            req.setDeliveryDate(deliveryDate);
            JOptionPane.showMessageDialog(this, "Delivery Date Updated !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            populateRequestTable();
            return;
        }
        else if(req.getIsManf()==false){
            JOptionPane.showMessageDialog(this, "First Manufacturing is not done !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsPaint()==false){
            JOptionPane.showMessageDialog(this, "Paint is not Manufactured!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsTech()==false){
            JOptionPane.showMessageDialog(this, "Technical is not Manufactured!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsTest()==false){
            JOptionPane.showMessageDialog(this, "Manufacture is not completed!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsLog()==true){
            JOptionPane.showMessageDialog(this, "Delivery Date Assigned", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        populateRequestTable();
    }//GEN-LAST:event_btnSetDDActionPerformed

    private void btnDeliveryComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryComActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        InventoryOrderRequest req = (InventoryOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
        if(req.getLogistics() != account){
            JOptionPane.showMessageDialog(this, "It is not assigned to you!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if (req.getLogistics() == account && req.getIsManf()==true && req.getIsPaint()==true && req.getIsTech()==true && req.getIsTest()==true && req.getIsLog()==true && req.getIsDelivered()==false){
            req.setStatus("Order Delivered!!");
            
            btnSetDD.setEnabled(false);
            btnDeliveryCom.setEnabled(false);
            req.setIsDelivered(true);
            JOptionPane.showMessageDialog(this, "Delivery status Updated !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            populateRequestTable();
            CarDirectory cd = req.getDistributor().getCarDirectory();
            Car car = req.getCar();
            for(Car c : cd.getCarslist()){
                if(c.getModel().equalsIgnoreCase(car.getModel()) && c.getEngine().equalsIgnoreCase(car.getEngine()) && c.getExteriorColor().equalsIgnoreCase(car.getExteriorColor())){
                    int q = c.getQuantity();
                    int q1 = car.getQuantity();
                    c.setQuantity(q+q1);
                    return;
                }
            }
            cd.createCar(car);
            return;
        }
        else if(req.getIsManf()==false){
            JOptionPane.showMessageDialog(this, "First Manufacturing is not done !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsPaint()==false){
            JOptionPane.showMessageDialog(this, "Paint is not Manufactured!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsTech()==false){
            JOptionPane.showMessageDialog(this, "Technical is not Manufactured!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsTest()==false){
            JOptionPane.showMessageDialog(this, "Manufacture is not completed!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(req.getIsLog()==false){
            JOptionPane.showMessageDialog(this, "Delivery Date not assigned", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        
    }//GEN-LAST:event_btnDeliveryComActionPerformed

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        InventoryOrderRequest req = (InventoryOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);

        ViewOrderInfoJPanel viojp = new ViewOrderInfoJPanel(workArea, req);
        workArea.add("ViewOrderInfoJPanel",viojp);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }//GEN-LAST:event_btnViewOrderActionPerformed

    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) tblWorkArea.getModel();
        
        model.setRowCount(0);

        for(Network network:system.getNetworkList()){
            for(Enterprise ent: network.getEnterpriseDirectory().getEnterpriseList()){
                if (ent.getName().equals(enterprise.getName())){
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
                        System.out.println(org.getName());
                        if(org.getName().equals(organization.getName())){
                            for(InventoryOrderRequest req : org.getInventoryOrderQueue().getInventoryOrderRequestList()){
                                    Object[] row = new Object[6];
                                    row[0] = req;
                                    row[1] = req.getCar().getModel();
                                    row[2] = req.getQuantity();
                                    row[3] = req.getLogistics()==null?"None":req.getLogistics().getUsername();
                                    row[4] = req.getDeliveryDate();
                                    row[5] = req.getStatus();

                                    model.addRow(row);
                            }
                        }
                    }
                    
                }
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnDeliveryCom;
    private javax.swing.JButton btnSetDD;
    private javax.swing.JButton btnViewOrder;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkArea;
    // End of variables declaration//GEN-END:variables
}
