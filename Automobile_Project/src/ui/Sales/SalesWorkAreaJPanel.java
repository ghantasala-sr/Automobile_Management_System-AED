/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Sales;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InventoryOrderRequest;
import Business.WorkQueue.PricingOrderRequest;
import Business.WorkQueue.QuoteOrderRequest;
import java.awt.CardLayout;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.Dealer.ViewCarDetailsJPanel;
import ui.Dealer.ViewCustomerDetailsJPanel;

/**
 *
 * @author srinivasarithikghantasala
 */
public class SalesWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SalesWorkAreaJPanel
     */
        JPanel workArea;
    EcoSystem system;
    UserAccount account;
    public SalesWorkAreaJPanel(JPanel workArea, UserAccount account, EcoSystem system) {
        initComponents();
        this.workArea = workArea;
        this.system = system;
        this.account = account;
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkArea = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnViewOrder = new javax.swing.JButton();
        btnPriceInfo = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblWorkArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Quote ID", "Customer", "Car Model", "Sales Person", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblWorkArea);

        btnAssign.setText("Assign to me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jLabel1.setText("Update Price :");

        jButton1.setText("Deliever the car");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnViewOrder.setText("View Car Details");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        btnPriceInfo.setText("Get Price Info");
        btnPriceInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceInfoActionPerformed(evt);
            }
        });

        jButton2.setText("View Customer Info");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel15.setText("Sales Work Area");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(367, 367, 367)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(246, 246, 246)
                            .addComponent(btnPriceInfo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAssign)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnSubmit))
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssign)
                    .addComponent(btnSubmit)
                    .addComponent(jLabel1)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnPriceInfo)
                    .addComponent(btnViewOrder))
                .addGap(101, 101, 101))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
        if(req.getSales() != null){
            JOptionPane.showMessageDialog(this, "Already assigned", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        req.setSales(account);
        req.setStatus("Sales Person assigned");
        populateRequestTable();

    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }
        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
                PricingOrderRequest pore = null;
                for(Network network:system.getNetworkList()){
            for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()){
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
                        System.out.println("Sales WA :"+ org);
                        if(org.getName().equals("Sales Organization")){
                            for(PricingOrderRequest por : org.getPriceOrderQueue().getPriceOrderList()){
                                    if(por.getQuoteOrderId().equals(req.getQuoteOrderId())){
                                        pore = por;
                                        break;
                                    }
     
                            }
                    }
                        
                    }

            }
        }
                
        if(pore.getIsPriceGiven()==false){
            JOptionPane.showMessageDialog(this, "Marketing team havent given pricing !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        } 
        
        
        if(req.getSales() != account){
            JOptionPane.showMessageDialog(this, "It is not assigned to you!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if (req.getSales() == account && req.getIsQuoteReq()==true && req.getIsQuoteRes()==false && req.getIsPriceAcceptable()==false ){
            req.setStatus("Estimated Price updated!!");
            req.setIsQuoteRes(true);
            String price = txtPrice.getText();
            
            if(price.trim().isEmpty()){
                 JOptionPane.showMessageDialog(this, "Give price", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
            }
            int fprice = Integer.parseInt(price);
            int cp = pore.getCeilingPrice();
            int fp = pore.getFloorPrice();
            int tp = pore.getTargetPrice();
            if(fprice<=cp && fprice>=fp){
                            req.setPrice(Integer.parseInt(price));
            JOptionPane.showMessageDialog(this, "Price Updated !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            populateRequestTable();
            return;
            }
            else {
                            JOptionPane.showMessageDialog(this, "Give valid price", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
            }

        }
        else if(req.getIsPriceAcceptable()==true){
            JOptionPane.showMessageDialog(this, "Price is confirmed, cannot change !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
       populateRequestTable();
  
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }
        
        
        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
       
        if(req.getSales() != account){
            JOptionPane.showMessageDialog(this, "It is not assigned to you!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        else if (req.getSales() == account && req.getIsQuoteReq()==true && req.getIsQuoteRes()==true && req.getIsPriceAcceptable()==true && req.getIsProcessing()==true && req.getIsReadyToDeliver()==true && req.getIsDelivered()==false){
            req.setStatus("Car is delivered successfully");
            req.setIsDelivered(true);
            JOptionPane.showMessageDialog(this, "Car is delivered successfully!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            populateRequestTable();
            return;
        }
        else if (req.getIsDelivered()==true){
             JOptionPane.showMessageDialog(this, "Order completed successfully!!", "Information", JOptionPane.INFORMATION_MESSAGE);
           
        }
        else {
            
            JOptionPane.showMessageDialog(this, "Car is not allocated yet!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);

        ViewCarDetailsJPanel viojp = new ViewCarDetailsJPanel(workArea, req);
        workArea.add("ViewCarDetailsJPanel",viojp);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }//GEN-LAST:event_btnViewOrderActionPerformed

    private void btnPriceInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceInfoActionPerformed
        // TODO add your handling code here:
        
                int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }
        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
                PricingOrderRequest pore = null;
                for(Network network:system.getNetworkList()){
            for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()){
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
                        System.out.println("Sales WA :"+ org);
                        if(org.getName().equals("Sales Organization")){
                            for(PricingOrderRequest por : org.getPriceOrderQueue().getPriceOrderList()){
                                    if(por.getQuoteOrderId().equals(req.getQuoteOrderId())){
                                        pore = por;
                                        break;
                                    }
     
                            }
                    }
                        
                    }

            }
        }
                
        if(pore.getIsPriceGiven()==false){
            JOptionPane.showMessageDialog(this, "Marketing team havent given pricing !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        } 
        
        
        if(req.getSales() != account){
            JOptionPane.showMessageDialog(this, "It is not assigned to you!!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if (req.getSales() == account && pore.getIsPriceGiven()==true ){

            int cp = pore.getCeilingPrice();
            int fp = pore.getFloorPrice();
            int tp = pore.getTargetPrice();

            String message = "Price Updated!!\n"
               + "Ceiling Price: " + cp + "\n"
               + "Floor Price: " + fp + "\n"
               + "Target Price: " + tp;

// Display the message in JOptionPane
JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
            }
            

        

        
        
    }//GEN-LAST:event_btnPriceInfoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);

        ViewCustomerDetailsJPanel viojp = new ViewCustomerDetailsJPanel(workArea, req);
        workArea.add("ViewCarDetailsJPanel",viojp);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);

    }//GEN-LAST:event_jButton2ActionPerformed
public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) tblWorkArea.getModel();
        
        model.setRowCount(0);

 Set<String> processedRequests = new HashSet<>();
for (Network network : system.getNetworkList()) {
    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getName().equals("Sales Organization")) {
                for (QuoteOrderRequest req : org.getQuoteOrderQueue().getQuoteOrderRequestList()) {
                    if (req.getDealer().getUsername().equals(account.getDealerName())) {
                        if (!processedRequests.contains(req.getQuoteOrderId())) {
                            Object[] row = new Object[5];
                            row[0] = req;
                            row[1] = req.getCustomer().getUsername();
                            row[2] = req.getCar().getModel();
                            row[3] = req.getSales() == null ? "None" : req.getSales().getUsername();
                            row[4] = req.getStatus();
                            model.addRow(row);
                            processedRequests.add(req.getQuoteOrderId());
                        }
                    }
                }
            }
        }
    }
}
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnPriceInfo;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnViewOrder;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkArea;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
