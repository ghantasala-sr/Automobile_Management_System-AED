/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SystemAdmin;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author srinivasarithikghantasala
 */
public class ManageEnterpriseJPanel extends javax.swing.JPanel {

    
    private JPanel userProcessContainer;
    private EcoSystem system;
    
    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateComboBox();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        enterpriseTypeJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "Network", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        jLabel3.setText("Enterprise Type");

        enterpriseTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Name");

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel15.setText("Manage Enterprise");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(enterpriseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(submitJButton)
                                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(327, 327, 327)
                        .addComponent(btnUpdate)
                        .addGap(72, 72, 72)
                        .addComponent(btnDelete))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(backJButton)
                            .addGap(280, 280, 280)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 845, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enterpriseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(submitJButton)
                .addGap(140, 140, 140))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

       // Get the selected network and enterprise type
Network network = (Network) system.getNetworkList().get(0);
Enterprise.EnterpriseType type = (Enterprise.EnterpriseType) enterpriseTypeJComboBox.getSelectedItem();

// Validate network and enterprise type
if (network == null || type == null) {
    JOptionPane.showMessageDialog(null, "Please select a valid Network and Enterprise Type!", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

// Get the enterprise name
String name = nameJTextField.getText().trim();

// Validate enterprise name
if (name.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Enterprise name cannot be empty!", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

// Validate name format: ^[a-zA-Z ]+$
if (!name.matches("^[a-zA-Z ]+$")) {
    JOptionPane.showMessageDialog(null, "Enterprise name must contain only alphabets and spaces.", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

// Check if enterprise name is unique within the network
boolean isUnique = true;
for (Enterprise existingEnterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
    if (existingEnterprise.getName().equalsIgnoreCase(name)) {
        isUnique = false;
        break;
    }
}

if (!isUnique) {
    JOptionPane.showMessageDialog(null, "Enterprise name already exists in the network. Please choose a different name.", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

// Create and add enterprise
Enterprise enterprise = network.getEnterpriseDirectory().createAndAddEnterprise(name, type);

// Populate the table
populateTable();

JOptionPane.showMessageDialog(null, "Enterprise created successfully!");

    }//GEN-LAST:event_submitJButtonActionPerformed

     private void populateComboBox() {
          enterpriseTypeJComboBox.removeAllItems();
        for (Enterprise.EnterpriseType type : Enterprise.EnterpriseType.values()) {
            if(type.equals(Enterprise.EnterpriseType.SystemAdmin)){
                continue;
            }
            else {
            enterpriseTypeJComboBox.addItem(type);
            }
            
        }
        
        Network network = (Network) system.getNetworkList().get(0);
        System.out.println(network.getName());

    }
    
    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
   int selectedRow = enterpriseJTable.getSelectedRow();

if (selectedRow < 0) {
    JOptionPane.showMessageDialog(this, "Please select a row to update.", "Warning", JOptionPane.WARNING_MESSAGE);
    return;
}

String networkName = (String) enterpriseJTable.getValueAt(selectedRow, 1);
String enterpriseName = (String) enterpriseJTable.getValueAt(selectedRow, 0);

for (Network network : system.getNetworkList()) {
    if (network.getName().equals(networkName)) {
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise.getName().equals(enterpriseName)) {
                // Update Enterprise Name
                String newName = JOptionPane.showInputDialog(this, "Enter new name:", enterprise.getName());
                if (newName != null && !newName.trim().isEmpty() && !newName.equals(enterprise.getName())) {
                    // Validate name regex: ^[a-zA-Z ]+$
                    if (!newName.matches("^[a-zA-Z ]+$")) {
                        JOptionPane.showMessageDialog(this, "Enterprise name must contain only alphabets and spaces.", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    // Check if the new name is unique
                    boolean isUnique = true;
                    for (Enterprise existingEnterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (existingEnterprise.getName().equalsIgnoreCase(newName)) {
                            isUnique = false;
                            break;
                        }
                    }

                    if (!isUnique) {
                        JOptionPane.showMessageDialog(this, "Enterprise name already exists. Please choose a different name.", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    enterprise.setName(newName);
                }

                // Update Enterprise Type
                Enterprise.EnterpriseType newType = (Enterprise.EnterpriseType) JOptionPane.showInputDialog(
                    this,
                    "Select new enterprise type:",
                    "Update Enterprise Type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    Enterprise.EnterpriseType.values(),
                    enterprise.getEnterpriseType()
                );

                if (newType != null) {
                    enterprise.setEnterpriseType(newType);
                }

                populateTable();
                JOptionPane.showMessageDialog(this, "Enterprise updated successfully!");
                return;
            }
        }
    }
}

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = enterpriseJTable.getSelectedRow();

    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String networkName = (String) enterpriseJTable.getValueAt(selectedRow, 1);
    String enterpriseName = (String) enterpriseJTable.getValueAt(selectedRow, 0);

    for (Network network : system.getNetworkList()) {
        if (network.getName().equals(networkName)) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getName().equals(enterpriseName)) {
                    network.getEnterpriseDirectory().getEnterpriseList().remove(enterprise);
                    populateTable();
                    JOptionPane.showMessageDialog(this, "Enterprise deleted successfully!");
                    return;
                }
            }
        }
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise.getName().contains("System")){
                continue;
                }
                Object[] row = new Object[3];
                row[0] = enterprise.getName();
                row[1] = network.getName();
                row[2] = enterprise.getEnterpriseType().getValue();

                model.addRow(row);
            }
        }
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JComboBox enterpriseTypeJComboBox;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
