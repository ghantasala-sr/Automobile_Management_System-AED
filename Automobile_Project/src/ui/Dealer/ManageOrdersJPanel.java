/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Dealer;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.QuoteOrderRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author srinivasarithikghantasala
 */
public class ManageOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrdersJPanel
     */
    JPanel workArea;
    EcoSystem system;
    UserAccount account;
    String enName;
    public ManageOrdersJPanel(JPanel workArea, UserAccount account, EcoSystem system) {
        initComponents();
        this.workArea = workArea;
        this.system = system;
        this.account = account;
        enName = "DealerEnterprise";
        setSize(750, 530);
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkArea = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        btnViewOrder = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblWorkArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Quote ID", "Car Model", "Sales Person", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkArea);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSubmit.setText("Send to Distributor");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnViewOrder.setText("View Car Details");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        jButton1.setText("View Customer Info");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setText("Manage Orders");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(378, 378, 378)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(469, 469, 469)
                                .addComponent(btnViewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSubmit, btnViewOrder, jButton1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel1))
                .addGap(64, 64, 64)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewOrder)
                    .addComponent(jButton1)
                    .addComponent(btnSubmit))
                .addContainerGap(250, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }
        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);
        if (req.getIsQuoteReq()==true && req.getIsQuoteRes()==true && req.getIsPriceAcceptable()==true && req.getIsProcessing()==false ){
            req.setStatus("Order processing!!!");
            req.setIsProcessing(true);
            JOptionPane.showMessageDialog(this, "Order processing !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            populateRequestTable();
            return;
        }
        else if(req.getIsQuoteReq()==true && req.getIsQuoteRes()==true && req.getIsPriceAcceptable()==true && req.getIsProcessing()==true){
            JOptionPane.showMessageDialog(this, "Order is under processing !!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
       populateRequestTable();
        
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);

        ViewCarDetailsJPanel viojp = new ViewCarDetailsJPanel(workArea, req);
        workArea.add("ViewCarDetailsJPanel",viojp);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);

    }//GEN-LAST:event_btnViewOrderActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Pick a selected row", "Information", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        QuoteOrderRequest req = (QuoteOrderRequest)tblWorkArea.getValueAt(selectedRow, 0);

        ViewCustomerDetailsJPanel viojp = new ViewCustomerDetailsJPanel(workArea, req);
        workArea.add("ViewCarDetailsJPanel",viojp);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) tblWorkArea.getModel();
        
        model.setRowCount(0);

        for(Network network:system.getNetworkList()){
            for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()){
                if (Enterprise.EnterpriseType.Dealer.equals(enterprise.getEnterpriseType())){
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(org.getName().equals("Dealer Organization")){
                            for(QuoteOrderRequest req : org.getQuoteOrderQueue().getQuoteOrderRequestList()){
                                if(req.getDealer().getUsername().equals(account.getUsername())){
                                    Object[] row = new Object[5];
                                    row[0] = req;
                                    row[1] = req.getCar().getModel();
                                    row[2] = req.getSales()==null?"None":req.getSales().getUsername();
                                    row[3] = req.getPrice()==0?"None":req.getPrice();
                                    row[4] = req.getStatus();
                                    model.addRow(row);
                                }
                                   

                                    
                            }
                        }
                    }
                    
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnViewOrder;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkArea;
    // End of variables declaration//GEN-END:variables
}
